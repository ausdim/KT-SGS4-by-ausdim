#!/bin/bash
# Kernel Build & Repack Script by Ghost44

ZIMAGE=arch/arm/boot/zImage

REPACK_DIR=build/TW-4.4

OUTPUT=build/output

MODULES=build/output/modules

FINAL_OUTPUT=/output/boot.img

BUILD_USER="$USER"

DATE=`date +%b-%d-%Y-%T`

TOOLCHAIN_DIR=/home/ghost44/android/toolchains


# Toolchains

###Stock

#BUILD_CROSS_COMPILE=$TOOLCHAIN_DIR/arm-eabi-4.7/bin/arm-eabi-

#BUILD_CROSS_COMPILE=$TOOLCHAIN_DIR/arm-eabi-4.8/bin/arm-eabi-

###linaro cortex a15 optimized

BUILD_CROSS_COMPILE=$TOOLCHAIN_DIR/arm-cortex_a15-linux-gnueabihf-linaro_4.7.4-2014.06/bin/arm-cortex_a15-linux-gnueabihf-

#BUILD_CROSS_COMPILE=$TOOLCHAIN_DIR/arm-cortex_a15-linux-gnueabihf-linaro_4.8.4-2014.11/bin/arm-cortex_a15-linux-gnueabihf-

#BUILD_CROSS_COMPILE=$TOOLCHAIN_DIR/arm-cortex_a15-linux-gnueabihf-linaro_4.9.3-2014.11/bin/arm-cortex_a15-linux-gnueabihf-

###Linaro

#BUILD_CROSS_COMPILE=$TOOLCHAIN_DIR/arm-linux-gnueabi-linaro_4.8.4-2014.11/bin/arm-eabi-

#BUILD_CROSS_COMPILE=$TOOLCHAIN_DIR/arm-linux-gnueabi-linaro_4.9.3-2014.11/bin/arm-eabi-



BUILD_JOB_NUMBER=`grep processor /proc/cpuinfo|wc -l`

USER_DEFCONFIG=0ghost_defconfig

VARIANT_DEFCONFIG=jf_INTL_defconfig

SELINUX_DEFCONFIG=selinux_defconfig

SELINUX_LOG_DEFCONFIG=selinux_log_defconfig


BUILD_KERNEL()
{
        echo ""
        echo "=============================================="
        echo "START: MAKE CLEAN"
        echo "=============================================="
        echo ""

        #make mrproper

        make clean

        echo "=============================================="
        echo "CPU: $BUILD_JOB_NUMBER"
        echo
        echo "BUILD USER: $BUILD_USER"
        echo
        echo "TOOLCHAIN: $BUILD_CROSS_COMPILE"
        echo
        echo "START: BUILD_KERNEL"
        echo "=============================================="

        #find -name '*.ko' -exec rm -rf {} \;

        export USE_SEC_FIPS_MODE=true

        export KCONFIG_NOTIMESTAMP=true

        export ARCH=arm

        export CROSS_COMPILE=$BUILD_CROSS_COMPILE

        make $USER_DEFCONFIG VARIANT_DEFCONFIG=$VARIANT_DEFCONFIG SELINUX_DEFCONFIG=$SELINUX_DEFCONFIG SELINUX_LOG_DEFCONFIG=$SELINUX_LOG_DEFCONFIG

#       make CONFIG_NO_ERROR_ON_MISMATCH=y -j$BUILD_JOB_NUMBER

#       make -j2

        make -j$BUILD_JOB_NUMBER

        echo
        echo "================================="
        echo "END: BUILD_KERNEL"
        echo "================================="
        echo


        if [[ -e $ZIMAGE ]]; then 
           echo "zImage found!"
           clear
        else
           echo "No zImage found!"
        exit
        fi;

	echo
	echo "Building boot.img of Ghost-LIGHT-Kernel"
	echo

	echo "Cleaning..."

	rm -f build/TW-4.4/zImage

	rm -f build/TW-4.4/ramdisk.gz

        rm -r $MODULES

	mkdir $MODULES

	echo "Copying zImage and modules"

	cp $ZIMAGE $REPACK_DIR/zImage

	find . -name "*.ko" -exec cp {} $MODULES \;

	cd $REPACK_DIR

	echo "Packing ramdisk"

	../mkbootfs ./ramfs-FULL | gzip > ramdisk.gz

	echo "Packing boot.img"

../mkbootimg --kernel zImage --ramdisk ramdisk.gz --cmdline "console=null androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x3F ehci-hcd.park=3" -o boot.img --base "0x80200000" --ramdiskaddr "0x82200000"

	echo
	rm -f zImage
	rm -f ramdisk.gz

	mv -f boot.img ..$FINAL_OUTPUT

	cd ..

	echo "boot.img created Successfully"
}




# MAIN FUNCTION
rm -rf ./build.log
(
        START_TIME=`date +%s`
        BUILD_DATE=`date +%m-%d-%Y`
        BUILD_KERNEL
        END_TIME=`date +%s`
        let "ELAPSED_TIME=$END_TIME-$START_TIME"
        echo "Total compile time is $ELAPSED_TIME seconds"
) 2>&1 | tee -a ./build.log


# Credits:
# Samsung
# google
# osm0sis
# cyanogenmod
# kylon
# thehacker911
# broodplank
